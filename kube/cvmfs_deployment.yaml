apiVersion: v1
kind: ConfigMap
metadata:
  name: v4cvmfs
  namespace: varnish
  labels:
    k8s-app: v4cvmfs
data:
  default.vcl: |-
    vcl 4.1;
    import std;
    import dynamic;
    import directors;

    backend fermilab {
        .host = "cvmfs-srv.fnal.gov";
        .port = "8000";
    }
    backend bnl_1 {
        .host = "192.12.15.239";
        .port = "8000";
    }
    backend bnl_2 {
        .host = "192.12.15.244";
        .port = "8000";
    }
    backend cern_1 {
        .host = "128.142.194.109";
        .port = "80";
    }

    sub vcl_recv {

        if (req.method != "GET" && req.method != "HEAD") {
            return (pipe);
        }
        if (req.restarts == 0) {
            set req.backend_hint = fermilab;
        }
        if (req.restarts == 1) {
            set req.backend_hint = bnl_1;
        }
        if (req.restarts == 2) {
            set req.backend_hint = bnl_2;
        }
        if (req.restarts == 3) {
            set req.backend_hint = cern_1;
        }
    }

    sub vcl_backend_fetch {
        # this is needed for BNL CERN and some other backends
        unset bereq.http.host;
    }

    sub vcl_backend_response {
        if ( beresp.status != 200 ) {
            
            if (bereq.backend != cern_1 ){
                # unless this is a last of backends don't cache it so 
                # other backends can be tried
                set beresp.uncacheable = true;
                return (deliver);
            } else {
                std.log(">> caching Response <<");
                set beresp.ttl = 180s;
            }
        } 
    }

    sub vcl_deliver {
        if (resp.status != 200) {
            if (obj.uncacheable){
                # not all the backends were tried yet
                std.log(">> force restart <<<");
                return(restart);
            }
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: v4cvmfs
  namespace: varnish
  labels:
    k8s-app: v4cvmfs
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: v4cvmfs
  template:
    metadata:
      labels:
        k8s-app: v4cvmfs
    spec:
      containers:
        - name: v4cvmfs
          image: ivukotic/v4cvmfs:cvmfs-no-snmp
          env:
            - name: SITE
              value: "<SITENAME>"
            - name: INSTANCE
              value: "<INSTANCE>"
            - name: VARNISH_PORT
              value: "8080"
            - name: VARNISH_MEM
              value: "32G"
            - name: VARNISH_TRANSIENT_MEM
              value: "2G"
          ports:
            - containerPort: 8080
              hostPort: 6081
          volumeMounts:
            - name: config-volume
              mountPath: /etc/varnish/
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/sender.sh
            initialDelaySeconds: 120
            timeoutSeconds: 4
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: "1"
              memory: "34Gi"
            limits:
              cpu: "6"
              memory: "48Gi"
      nodeSelector:
        kubernetes.io/hostname: <NODE>
      volumes:
        - name: config-volume
          configMap:
            name: v4cvmfs
  strategy:
    type: Recreate
